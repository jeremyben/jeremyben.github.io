%vmiddle_parent{
  @include transform-style(preserve-3d);
}
%vmiddle_child{
  margin-bottom: 0;
  margin-top: 0;
  position: relative;
  top: 50%;
  @include transform(translateY(-50%));
}

// VMIDDLE
// vertically align child in parent (ie9+)
// .parent{
//   @extend vmiddle(child)
// }
@mixin vmiddle($child : 'p') {
  @include transform-style(preserve-3d);
  @if $child == (p or span or div or h1 or h2 or h3 or h4 or h5 or h6 or strong or em or i){
    #{$child} {
      margin-bottom: 0;
      margin-top: 0;
      position: relative;
      top: 50%;
      @include transform(translateY(-50%));
    }
  } @else {
    .#{$child} {
      margin-bottom: 0;
      margin-top: 0;
      position: relative;
      top: 50%;
      @include transform(translateY(-50%));
    } 
  }
}

// HOVER
// Wraps your rules in :hover and :focus states
// .link {
//   color: #fff ;
//   @include hover{color : #000;}
// }
@mixin hover {
  &:hover,
  &:focus {
    @content;
  }
}

// BORDER-SANDWICH
// Creates top and bottom border on one or a group of elements (ie9+)
// Set the $breadless to true to remove outer borders
@mixin border-sandwich($border, $breadless: false) {
  @if ($breadless) {
    &:not(:first-of-type) { 
      border-top: $border;
    }
  } @else {
    border-bottom: $border;
    &:first-of-type {
      border-top: $border;
    }
  }
}

// 3D TEXT-SHADOW
@mixin text3d($color, $depth, $harshness : 5%) {
  $all: ();
  @for $i from 1 through $depth {
    $all: append($all, append(
            0 $i*1px 0,
            desaturate(darken($color, $i*$harshness),$i*$harshness)),
            comma
          );
  }
  // $all: append($all, 0 $depth*1px $depth*1px rgba(0,0,0,.1));
  text-shadow: $all
}


// Readable media queries
@mixin media-max($end) {
  @media screen and (max-width: ($end - 1)) {
    @content;
  }
}
@mixin media-between($start, $end) {
  @media screen and (min-width: $start) and (max-width: ($end - 1)) {
    @content;
  }
}
@mixin media-min($start) {
  @media screen and (min-width: $start) {
    @content;
  }
}

// OMEGA RESET
// reset omega for media queries in a mobile-first approach
// change context for flex-gutter if number of columns != 12
@mixin omega-reset($nth, $context: null) {
  @if $context == null { &:nth-child(#{$nth}) { margin-right: flex-gutter(); } }
  @else { &:nth-child(#{$nth}) { margin-right: flex-gutter($context); } }
  &:nth-child(#{$nth}+1) { clear: none; }
}
